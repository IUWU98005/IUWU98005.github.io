[{"content":"项目简介 这是一个基于 Langchain 开发的 DOTA2 赛后分析工具。通过获取比赛数据，生成个性化的比赛评价报告。项目采用 Streamlit 框架实现前后端交互。\n主要功能 三种评价风格 专业分析: 客观分析数据，提供专业的改进建议 轻松模式: 用轻松愉快的语气点评比赛，突出精彩表现 挑剔模式: 以幽默风趣的方式指出问题，帮助提升 数据分析维度 比赛核心数据（击杀、死亡、助攻等） 选手表现要点分析 团队数据对比 改进方向建议 界面特点 简洁的 Streamlit 界面 支持深色模式 快速生成报告 自然的对话交互 使用指南 环境要求 Python 3.13+ Streamlit 相关依赖包 部署步骤 克隆项目\ngit clone \u0026lt;repository-url\u0026gt; cd dota2-review-assistant 安装依赖\npip install streamlit langchain langchain-openai langchain-community pip install langgraph python-dotenv cloudscraper requests 配置环境变量\n创建 .env 文件：\nOPENAI_API_KEY=your_openai_api_key STRATZ_API_KEY=your_stratz_api_key 启动应用\nstreamlit run streamlit_app.py 使用方法 基础分析 输入玩家 Steam ID 输入比赛 ID 选择评价风格 点击\u0026quot;开始分析\u0026quot; 对话分析 在对话框输入需求，系统会根据关键词自动选择合适的分析风格：\n关于出色表现的提问 → 轻松模式 关于问题分析的提问 → 挑剔模式 常规提问 → 专业分析模式 示例输入 分析玩家123456789最近一场比赛的表现 点评玩家123456789在比赛7891234567中的精彩操作 详细分析玩家123456789在比赛7891234567中的问题 技术架构 核心组件 streamlit_app.py: 前端界面和用户交互 agent.py: AI分析引擎，包含三种不同的分析模式 stratz.py: DOTA2数据获取工具，调用Stratz API AI模型 使用GLM-4-Flash模型进行自然语言处理 基于LangChain框架构建智能代理 支持工具调用和多轮对话 数据来源 Stratz API: 获取详细的比赛和玩家数据 支持实时数据查询和历史数据分析 界面预览 现代化的渐变色设计 类似聊天软件的对话界面 响应式布局，支持移动端 自动适配暗色模式 配置说明 API密钥配置 需要获取以下API密钥：\nOpenAI API Key: 用于AI模型调用（支持智谱GLM-4-Flash） Stratz API Key: 用于获取DOTA2数据 环境变量 在 .env 文件中配置：\nOPENAI_API_KEY=your_openai_api_key STRATZ_API_KEY=your_stratz_api_key 🎯 核心功能详解 数据获取模块 (stratz.py) @tool def get_player_data(steam_id: int, match_id: int): \u0026#34;\u0026#34;\u0026#34;获取玩家在指定比赛中的详细数据\u0026#34;\u0026#34;\u0026#34; # 通过GraphQL查询获取比赛数据 # 包括KDA、经济、伤害、英雄信息等 AI分析引擎 (agent.py) # 三种不同的分析模式 def agent(content: str, model: ChatOpenAI, tools: list[tool]) -\u0026gt; dict: \u0026#34;\u0026#34;\u0026#34;综合分析模式 - 客观专业\u0026#34;\u0026#34;\u0026#34; def praise_agent(content: str, model: ChatOpenAI, tools: list[tool]) -\u0026gt; dict: \u0026#34;\u0026#34;\u0026#34;彩虹屁模式 - 疯狂夸奖\u0026#34;\u0026#34;\u0026#34; def roast_agent(content: str, model: ChatOpenAI, tools: list[tool]) -\u0026gt; dict: \u0026#34;\u0026#34;\u0026#34;毒舌模式 - 犀利吐槽\u0026#34;\u0026#34;\u0026#34; 数据指标体系 战斗表现: KDA、伤害输出、支援能力 经济发展: 补刀效率、净资产、等级 英雄信息: 英雄选择、装备搭配 时间维度: 比赛时长、发育节奏 锐评示例 彩虹屁模式示例 \u0026ldquo;兄弟你这波操作简直绝绝子！15个击杀YYDS，这伤害打得对面怀疑人生，纯纯的carry全场！这就是传说中的电竞天才吧，我上我真不行！\u0026rdquo;\n毒舌模式示例 \u0026ldquo;兄弟，这0-10-2的战绩是认真的吗？补刀被对面压了一倍，这经济差距我都不好意思说。不过没关系，菜是原罪，但菜得这么有特色也是一种天赋！\u0026rdquo;\n综合分析示例 \u0026ldquo;本场比赛表现中规中矩，KDA为8-3-12，参团率较高。补刀效率需要提升，建议加强对线期的基本功练习。团战定位不错，但需要注意走位避免不必要的死亡。\u0026rdquo;\n","permalink":"https://iuwu98005.github.io/projects/dota2-player-review/","summary":"\u003ch2 id=\"项目简介\"\u003e项目简介\u003c/h2\u003e\n\u003cp\u003e这是一个基于 Langchain 开发的 DOTA2 赛后分析工具。通过获取比赛数据，生成个性化的比赛评价报告。项目采用 Streamlit 框架实现前后端交互。\u003c/p\u003e\n\u003ch2 id=\"主要功能\"\u003e主要功能\u003c/h2\u003e\n\u003ch3 id=\"三种评价风格\"\u003e三种评价风格\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e专业分析\u003c/strong\u003e: 客观分析数据，提供专业的改进建议\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e轻松模式\u003c/strong\u003e: 用轻松愉快的语气点评比赛，突出精彩表现\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e挑剔模式\u003c/strong\u003e: 以幽默风趣的方式指出问题，帮助提升\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据分析维度\"\u003e数据分析维度\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e比赛核心数据（击杀、死亡、助攻等）\u003c/li\u003e\n\u003cli\u003e选手表现要点分析\u003c/li\u003e\n\u003cli\u003e团队数据对比\u003c/li\u003e\n\u003cli\u003e改进方向建议\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"界面特点\"\u003e界面特点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e简洁的 Streamlit 界面\u003c/li\u003e\n\u003cli\u003e支持深色模式\u003c/li\u003e\n\u003cli\u003e快速生成报告\u003c/li\u003e\n\u003cli\u003e自然的对话交互\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用指南\"\u003e使用指南\u003c/h2\u003e\n\u003ch3 id=\"环境要求\"\u003e环境要求\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ePython 3.13+\u003c/li\u003e\n\u003cli\u003eStreamlit\u003c/li\u003e\n\u003cli\u003e相关依赖包\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"部署步骤\"\u003e部署步骤\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e克隆项目\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone \u0026lt;repository-url\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd dota2-review-assistant\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装依赖\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install streamlit langchain langchain-openai langchain-community\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install langgraph python-dotenv cloudscraper requests\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e配置环境变量\u003c/p\u003e\n\u003cp\u003e创建 \u003ccode\u003e.env\u003c/code\u003e 文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOPENAI_API_KEY\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eyour_openai_api_key\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSTRATZ_API_KEY\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eyour_stratz_api_key\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e启动应用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estreamlit run streamlit_app.py\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"使用方法\"\u003e使用方法\u003c/h2\u003e\n\u003ch3 id=\"基础分析\"\u003e基础分析\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e输入玩家 Steam ID\u003c/li\u003e\n\u003cli\u003e输入比赛 ID\u003c/li\u003e\n\u003cli\u003e选择评价风格\u003c/li\u003e\n\u003cli\u003e点击\u0026quot;开始分析\u0026quot;\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"对话分析\"\u003e对话分析\u003c/h3\u003e\n\u003cp\u003e在对话框输入需求，系统会根据关键词自动选择合适的分析风格：\u003c/p\u003e","title":"Dota2 player review"},{"content":"安装 Django pip install django Django 常用命令 使用语法：django-admin [options]\nstartproject \u0026lt;project_name\u0026gt; # 创建项目 startapp # 创建一个 django 应用 check # 校验项目完整性 runserver # 运行项目 e.g. python manage.py runserver shell # 进入 django shell test # 运行测试 数据库相关：\nmakemigrations # 生成数据库迁移文件 migrate # 执行上条命令创建的迁移文件 dumpdata # 导出数据库数据 loaddata # 导入数据库数据 Django 项目（Project）目录结构介绍 . ├── manage.py ├── project_name │ ├── __init__.py │ ├── settings.py # 项目配置文件 │ ├── urls.py # 项目路由文件 │ ├── wsgi.py # 项目 wsgi 配置文件 urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;blog/\u0026#39;, include(\u0026#39;blog.urls\u0026#39;)), path(\u0026#39;\u0026#39;, include(\u0026#39;blog.urls\u0026#39;)), # 首页 ] Django 应用（app）目录结构介绍 以下是一个典型的 Django 应用目录结构：\n. ├── __init__.py ├── admin.py ├── apps.py ├── migrations # 数据库迁移文件目录 │ └── __init__.py # migrate 命令会在该目录下生成迁移文件 e.g. `0001_initial.py` ├── models.py ├── tests.py └── views.py views.py 在该文件下实现你的视图函数逻辑\nfrom django.shortcuts import render from django.http import HttpResponse def index(request): return HttpResponse(\u0026#34;Hello, world. You\u0026#39;re at the blog index.\u0026#34;) def detail(request, article_id): return HttpResponse(\u0026#34;You\u0026#39;re looking at article %s.\u0026#34; % article_id) models.py 在该文件下定义你的数据库模型\nfrom django.db import models class Article(models.Model): title = models.CharField(max_length=200) content = models.TextField() pub_date = models.DateTimeField(\u0026#39;date published\u0026#39;) urls.py 在该文件下定义你的路由\nfrom django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), path(\u0026#39;detail/\u0026lt;int:article_id\u0026gt;/\u0026#39;, views.detail, name=\u0026#39;detail\u0026#39;), ] 基于 Bootstrap 实现前端页面 Bootstrap 引入 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Bootstrap demo\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用模板系统渲染页面 Django 模板系统的基本语法 变量标签\n{{ [argument] }} for 循环标签\n{% for [item] in [items] %} [html code] {% endfor %} if-else 判断标签\n{% if [condition] %} [html code] {% else %} [html code] {% endif %} url 标签\n\u0026lt;!-- 这段代码将访问 router/arg 路径 --\u0026gt; \u0026lt;a href = \u0026#34;{% url \u0026#39;[router]\u0026#39; [arg]}\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 使用实例 {% if next_article %} \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;{% url \u0026#39;detail\u0026#39; next_article.article_id %}\u0026#34;\u0026gt;下一篇：{{ next_article.title }} \u0026lt;i class=\u0026#34;fas fa-chevron-right ms-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% else %} \u0026lt;li class=\u0026#34;page-item disabled\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;已是最后一篇 \u0026lt;i class=\u0026#34;fas fa-ban ms-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {% endif %} ","permalink":"https://iuwu98005.github.io/posts/250815-django/","summary":"\u003ch2 id=\"安装-django\"\u003e安装 Django\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install django\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"django-常用命令\"\u003eDjango 常用命令\u003c/h2\u003e\n\u003cp\u003e使用语法：\u003ccode\u003edjango-admin [options]\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estartproject \u0026lt;project_name\u0026gt;  # 创建项目\u003c/li\u003e\n\u003cli\u003estartapp                     # 创建一个 django 应用\u003c/li\u003e\n\u003cli\u003echeck                        # 校验项目完整性\u003c/li\u003e\n\u003cli\u003erunserver                    # 运行项目 e.g. python manage.py runserver\u003c/li\u003e\n\u003cli\u003eshell                        # 进入 django shell\u003c/li\u003e\n\u003cli\u003etest                         # 运行测试\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据库相关：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emakemigrations              # 生成数据库迁移文件\u003c/li\u003e\n\u003cli\u003emigrate                     # 执行上条命令创建的迁移文件\u003c/li\u003e\n\u003cli\u003edumpdata                    # 导出数据库数据\u003c/li\u003e\n\u003cli\u003eloaddata                    # 导入数据库数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"django-项目project目录结构介绍\"\u003eDjango 项目（Project）目录结构介绍\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-PlainText\" data-lang=\"PlainText\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── manage.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── project_name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── settings.py  # 项目配置文件\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── urls.py      # 项目路由文件\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── wsgi.py      # 项目 wsgi 配置文件\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"urlspy\"\u003eurls.py\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.urls \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e . \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e views\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eurlpatterns \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    path(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;admin/\u0026#39;\u003c/span\u003e, admin\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esite\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eurls),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    path(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blog/\u0026#39;\u003c/span\u003e, include(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blog.urls\u0026#39;\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    path(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e, include(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blog.urls\u0026#39;\u003c/span\u003e)),  \u003cspan style=\"color:#75715e\"\u003e# 首页\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"django-应用app目录结构介绍\"\u003eDjango 应用（app）目录结构介绍\u003c/h2\u003e\n\u003cp\u003e以下是一个典型的 Django 应用目录结构：\u003c/p\u003e","title":"Django 学习记录"},{"content":"首先将项目的目录结构调整为如下：\n. ├── vector # 待测试的代码 │ ├── __init__.py │ └── vector.py ├── tests # 测试文件夹 │ ├── __init__.py │ └── test_vector.py └── main.py 待测试代码（vector.py） class Vector: def __init__(self, x, y): if isinstance(x, (int, float)) and isinstance(y, (int, float)): self.x = x self.y = y else: raise ValueError(\u0026#34;x and y must be numbers\u0026#34;) def add(self, other): return Vector(self.x + other.x, self.y + other.y) 测试代码（test_vector.py） import unittest import sys from vector import Vector class TestVector(unittest.TestCase): # 每次运行 unittest 的开始与结束打印信息 @classmethod def setUpClass(cls): print(\u0026#34;start\u0026#34;) @classmethod def tearDownClass(cls): print(\u0026#34;end\u0026#34;) def test_init(self): v = Vector(1, 2) self.assertEqual(v.x, 1) self.assertEqual(v.y, 2) # self.assertTrue(v.x == 0) # 测试 __init__ 的 raise error 是否正常工作 with self.assertRaises(ValueError): Vector(\u0026#34;a\u0026#34;, 2) # 满足条件下跳过该测试，并提示 msg @unittest.skipIf(sys.platform == \u0026#34;win32\u0026#34;, \u0026#34;skip on windows\u0026#34;) def test_platform(self): ... assertEqual() 在不相等时，错误信息会给出 v.x 的值， 方便定位问题。而 assertTrue() 只会提示 False != True。\n运行测试 使用命令 python -m unittest 运行测试。\n运行指定的测试脚本：python -m unittest test.test_vector.TestVector.test_add\n","permalink":"https://iuwu98005.github.io/posts/250812-unittest/","summary":"\u003cp\u003e首先将项目的目录结构调整为如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-PlainText\" data-lang=\"PlainText\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── vector  # 待测试的代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   └── vector.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── tests  # 测试文件夹\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   └── test_vector.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── main.py\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"待测试代码vectorpy\"\u003e待测试代码（vector.py）\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eVector\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e__init__\u003c/span\u003e(self, x, y):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e isinstance(x, (int, float)) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e isinstance(y, (int, float)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e y\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eValueError\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x and y must be numbers\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(self, other):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Vector(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ex \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e other\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ex, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ey \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e other\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ey)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"测试代码test_vectorpy\"\u003e测试代码（test_vector.py）\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e unittest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e vector \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Vector\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestVector\u003c/span\u003e(unittest\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTestCase):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 每次运行 unittest 的开始与结束打印信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@classmethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetUpClass\u003c/span\u003e(cls):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;start\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@classmethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etearDownClass\u003c/span\u003e(cls):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_init\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        v \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Vector(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassertEqual(v\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ex, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassertEqual(v\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ey, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# self.assertTrue(v.x == 0)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 测试 __init__ 的 raise error 是否正常工作\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassertRaises(\u003cspan style=\"color:#a6e22e\"\u003eValueError\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Vector(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 满足条件下跳过该测试，并提示 msg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@unittest.skipIf\u003c/span\u003e(sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplatform \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;win32\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;skip on windows\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_platform\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eassertEqual()\u003c/code\u003e 在不相等时，错误信息会给出 \u003ccode\u003ev.x\u003c/code\u003e 的值， 方便定位问题。而 \u003ccode\u003eassertTrue()\u003c/code\u003e 只会提示 \u003ccode\u003eFalse != True\u003c/code\u003e。\u003c/p\u003e","title":"Python Unittest 使用方法速查"},{"content":"设计测试用例的方法 设计测试用例的方法根据核心区别，分为从需求出发（黑盒测试），从代码出发（白盒测试）。\n一、黑盒测试用例设计方法 根据用户需求和功能出发，不关注代码实现，可分为以下几种方法。\n等价类划分 将输入分为有效类和无效等价类，各取一个代表值进行测试。 例：年龄输入框（18-60），有效类：18、24、60，无效类：\u0026lt;18，\u0026gt;60，非数字。 边界值分析 测试输入边界以及其近邻值。 例：年龄输入框（18-60），边界值：18、60，近邻值：17、61。 判定表法（Decison Table） 适用于多条件组合的场景，列出条件与结果的对应关系来生成用例。 例：登录功能中【用户名是否为空】【密码是否为空】-\u0026gt;【提示信息】 因果图法 用图形表示条件和结果的逻辑关系，然后转化为判定表。 常用于复杂业务的测试逻辑。 场景法、流程法 按照用户的真实操作流程（场景）来设计测试用例，常结合业务用例图或流程图。 例：电商下单-支付-发货-确认收货。 错误推测法 思路：根据经验推测出容易出错的地方。 例：超长字符，特殊符号，SQL注入，空格，重复提交。 二、白盒测试用例设计方法 从代码结构出发，关注程序的执行路径。\n语句覆盖（Statement Coverage） 每个语句至少执行一次。 判定覆盖、分支覆盖 每个分支（True/False）至少执行一次。 条件覆盖 每个条件（True/False）至少执行一次。 判定、条件覆盖 结合分支和条件的覆盖。 路径覆盖 覆盖程序中所有可能的路径（核心逻辑模块） 测试用例设计举例 \u0026hellip;\n","permalink":"https://iuwu98005.github.io/posts/250812-test-case/","summary":"\u003ch2 id=\"设计测试用例的方法\"\u003e设计测试用例的方法\u003c/h2\u003e\n\u003cp\u003e设计测试用例的方法根据核心区别，分为从需求出发（黑盒测试），从代码出发（白盒测试）。\u003c/p\u003e\n\u003ch3 id=\"一黑盒测试用例设计方法\"\u003e一、黑盒测试用例设计方法\u003c/h3\u003e\n\u003cp\u003e根据用户需求和功能出发，不关注代码实现，可分为以下几种方法。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e等价类划分\n\u003cul\u003e\n\u003cli\u003e将输入分为有效类和无效等价类，各取一个代表值进行测试。\u003c/li\u003e\n\u003cli\u003e例：年龄输入框（18-60），有效类：18、24、60，无效类：\u0026lt;18，\u0026gt;60，非数字。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e边界值分析\n\u003cul\u003e\n\u003cli\u003e测试输入边界以及其近邻值。\u003c/li\u003e\n\u003cli\u003e例：年龄输入框（18-60），边界值：18、60，近邻值：17、61。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e判定表法（Decison Table）\n\u003cul\u003e\n\u003cli\u003e适用于多条件组合的场景，列出条件与结果的对应关系来生成用例。\u003c/li\u003e\n\u003cli\u003e例：登录功能中【用户名是否为空】【密码是否为空】-\u0026gt;【提示信息】\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e因果图法\n\u003cul\u003e\n\u003cli\u003e用图形表示条件和结果的逻辑关系，然后转化为判定表。\u003c/li\u003e\n\u003cli\u003e常用于复杂业务的测试逻辑。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e场景法、流程法\n\u003cul\u003e\n\u003cli\u003e按照用户的真实操作流程（场景）来设计测试用例，常结合业务用例图或流程图。\u003c/li\u003e\n\u003cli\u003e例：电商下单-支付-发货-确认收货。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e错误推测法\n\u003cul\u003e\n\u003cli\u003e思路：根据经验推测出容易出错的地方。\u003c/li\u003e\n\u003cli\u003e例：超长字符，特殊符号，SQL注入，空格，重复提交。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"二白盒测试用例设计方法\"\u003e二、白盒测试用例设计方法\u003c/h3\u003e\n\u003cp\u003e从代码结构出发，关注程序的执行路径。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e语句覆盖（Statement Coverage）\n\u003cul\u003e\n\u003cli\u003e每个语句至少执行一次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e判定覆盖、分支覆盖\n\u003cul\u003e\n\u003cli\u003e每个分支（True/False）至少执行一次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e条件覆盖\n\u003cul\u003e\n\u003cli\u003e每个条件（True/False）至少执行一次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e判定、条件覆盖\n\u003cul\u003e\n\u003cli\u003e结合分支和条件的覆盖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e路径覆盖\n\u003cul\u003e\n\u003cli\u003e覆盖程序中所有可能的路径（核心逻辑模块）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"测试用例设计举例\"\u003e测试用例设计举例\u003c/h3\u003e\n\u003cp\u003e\u0026hellip;\u003c/p\u003e","title":"测试用例的设计"},{"content":"省流 - 使用方法 import asyncio import time async def say_after(delay: int, what: str): await asyncio.sleep(delay) return f\u0026#34;{what} - {delay}\u0026#34; async def main(): print(f\u0026#34;start at {time.strftime(\u0026#39;%X\u0026#39;)}\u0026#34;) ret = await asyncio.gather( say_after(1, \u0026#34;hello\u0026#34;), say_after(2, \u0026#34;world\u0026#34;), ) print(ret) print(f\u0026#34;end at {time.strftime(\u0026#39;%X\u0026#39;)}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: asyncio.run(main()) asyncio.gather() 的并发机制 被 async 修饰的方法在被调用时，会创建一个协程对象，通过 await 或者 asyncio.gather 包装成 task 对象，并注册到 event loop 中。\nawait \u0026lt;corotine\u0026gt; 和 asyncio.gather， 会将 corotine 转换为 task， 并添加到 event loop 中。 (async 修饰的函数， 会返回一个 corotine)\n在 asyncio 中，进行 return 操作就等价于 raise 了一个 StopIteration，并将返回值作为 StopIteration 的参数。\n当执行 asyncio.gather(say_after(1, \u0026quot;hello\u0026quot;), say_after(2, \u0026quot;world\u0026quot;)) 时，发生了以下过程：\n步骤1：协程对象创建 say_after(1, \u0026quot;hello\u0026quot;) 创建一个协程对象（不是立即执行） say_after(2, \u0026quot;world\u0026quot;) 创建另一个协程对象 步骤2：Task包装 asyncio.gather() 将这两个协程包装成独立的 Task 对象 每个Task都会被注册到当前的事件循环中 步骤3：并发调度 事件循环开始调度这些Task：\n时间线： 0秒: 两个Task同时开始执行 ├─ Task1: say_after(1, \u0026#34;hello\u0026#34;) 开始 │ └─ 遇到 await asyncio.sleep(1)，挂起1秒 └─ Task2: say_after(2, \u0026#34;world\u0026#34;) 开始 └─ 遇到 await asyncio.sleep(2)，挂起2秒 1秒: Task1 恢复执行 ├─ Task1: 完成并返回 \u0026#34;hello - 1\u0026#34; └─ Task2: 仍在等待中... 2秒: Task2 恢复执行 └─ Task2: 完成并返回 \u0026#34;world - 2\u0026#34; event loop 的工作原理 event loop 的最小调度单位是一个 task。\n当调用 asyncio.run 时，系统会创建一个事件循环（event loop）。在 main 函数中，asyncio.gather 的执行会将每个 say_after 协程包装成独立的 task 并注册到事件循环中。同时，事件循环会被告知需要等待这些 task 完成执行，随后控制权会被移交给事件循环进行任务调度。\n控制权交还机制 event loop 的控制权交回的方式:\n当 task 执行完成时，会将控制权交还给 event loop。 当 task 执行过程中，遇到了 await 关键字，会将控制权交还给 event loop。 event loop 通过以下方式实现并发：\n遇到 await 关键字时交出控制权： task 执行到 await asyncio.sleep(delay) 时 该 task 主动将控制权交还给 event loop event loop 此时可以立即调度其他等待的 task 非阻塞调度： event loop 维护一个就绪队列和等待队列 某个 task 因为 I/O 操作如（sleep）而等待时，不会阻塞整个程序 其他 task 可以继续执行 await 机制 在 task 中 await corotine 时，task 并不会交出控制权，他会调用对应的 corotine，并等待 corotine 返回值。\nGET_AWAITABLE 会将 awaitable 对象放到栈顶， 并将控制权交还给 event loop。\n待更新\u0026hellip;\n","permalink":"https://iuwu98005.github.io/posts/250627-python_asyncio/","summary":"\u003ch2 id=\"省流---使用方法\"\u003e省流 - 使用方法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e asyncio\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e time\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esay_after\u003c/span\u003e(delay: int, what: str):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e asyncio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esleep(delay)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ewhat\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e - \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003edelay\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;start at \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%X\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ret \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e asyncio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egather(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        say_after(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        say_after(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(ret)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;end at \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%X\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    asyncio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(main())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"asynciogather-的并发机制\"\u003e\u003ccode\u003easyncio.gather()\u003c/code\u003e 的并发机制\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e被 async 修饰的方法在被调用时，会创建一个协程对象，通过 \u003ccode\u003eawait\u003c/code\u003e 或者 \u003ccode\u003easyncio.gather\u003c/code\u003e 包装成 task 对象，并注册到 event loop 中。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003eawait \u0026lt;corotine\u0026gt;\u003c/code\u003e 和 \u003ccode\u003easyncio.gather\u003c/code\u003e， 会将 corotine 转换为 task， 并添加到 \u003ccode\u003eevent loop\u003c/code\u003e 中。 (async 修饰的函数， 会返回一个 corotine)\u003c/p\u003e","title":"Python Asyncio"},{"content":"GitFlow 是什么? GitFlow 简单来说, 就是使用 git 进行版本控制的一套规范.\n根据 GitFlow 的建议, 主要的分支分为 master, hotfix, dev, release 和 feat 这 5 种分支.\n下图来自 why-need-git-flow:\nmaster : 主干分支, 用于正式发布的分支, 需要由专人严格审核测试后的 release / hotfix 分支才可以合并到该分支.\nhotfix : 用于热修复, 当 master 出现紧急 bug 时, 就需要基于 master 临时创建一个分支进行修复, 修复测试完成后, 合并到 master 和 dev 分支, 修复完成后删除 hotfix 分支.\ndev : 开发分支, 在 master 分支基础上创建而来, 是功能开发的基础分支. 一般不可在这条分支上直接开发, 需要新建一个 feat 分支, 再进行开发.\nfeat: 功能分支, 基于 master 分支, 不同的开发人员负责不同的 feat 分支, 开发测试完成后, 提交 PR(Pull Request) 到 remote, 由专人审核, 审核通过后合并到 dev 分支.\nrelease: 预发布分支, 当 dev 分支积累了一定的功能后, 会基于 dev 新建一个 release 分支, 用于完成正式发布前的准备工作, 通过测试后, 最终会合并回 master 和 dev 分支\nGitFlow 提交信息规范 表示提交类型，常用的有：\nfeat: 新功能 fix: 修复问题 docs: 文档修改 style: 代码格式修改（不影响代码运行的变动） refactor: 代码重构（既不是新增功能，也不是修复bug） test: 添加或修改测试代码 chore: 构建过程或工具的变动 perf: 性能优化 ci: 持续集成 build: 影响构建系统或外部依赖项的更改\ngit 相较于其他版本管理工具的优缺点 优点 分布式架构\n每个开发者都有完整的仓库副本(含历史记录) ,不依赖中央服务器即可提交和查看历史.\n优势：离线操作、高可用性、更快的本地操作\n分支管理强大\n分支轻量、快速,支持多人并行开发、CI/CD流程.\n合并(merge/rebase) 工具成熟,利于团队协作.\nGit Flow / trunk-based development 等都以 Git 为基础.\n速度快\n大多数操作(如 diff、log、commit) 都是在本地进行,不需要联网访问远程服务器.\n对于大项目也具有优秀的性能表现.\n数据完整性高\n每个提交通过 SHA-1 哈希校验,防篡改能力强.\n历史记录不可随意修改(除非有意如 rebase) .\n缺点 不适合处理大二进制文件\nGit 本质是为代码服务的文本型系统,大文件(如图片、音视频、模型等) 管理困难.\n虽然有 Git LFS(Large File Storage) 方案,但配置和使用略复杂.\n仓库膨胀风险\n因为每个用户本地都有完整仓库副本,历史记录多时体积变大,clone 较慢.\n操作自由,导致误操作风险高\n如 force push、rebase 不当使用可能覆盖历史.\nSVN 中则较少发生这种情况(更受控) .\ngit 提交时, 如果出现冲突该如何解决 首先使用 git pull 命令, 将 remote 的代码拉取到本地. 编译器一般会弹出窗口提示用户手动解决冲突 merge 在解决冲突的时候, 手动编辑需要保留的最终版本 解决完所有冲突并commit后, 再将本地代码 push 到 remote 上 在 gitlab 或者 github 上提交 pull request, 请求将 feat 分支合并到 dev ","permalink":"https://iuwu98005.github.io/posts/250703_gitflow/","summary":"\u003ch2 id=\"gitflow-是什么\"\u003eGitFlow 是什么?\u003c/h2\u003e\n\u003cp\u003eGitFlow 简单来说, 就是使用 git 进行版本控制的一套规范.\u003c/p\u003e\n\u003cp\u003e根据 GitFlow 的建议, 主要的分支分为 \u003ccode\u003emaster\u003c/code\u003e, \u003ccode\u003ehotfix\u003c/code\u003e, \u003ccode\u003edev\u003c/code\u003e, \u003ccode\u003erelease\u003c/code\u003e 和 \u003ccode\u003efeat\u003c/code\u003e 这 5 种分支.\u003c/p\u003e\n\u003cp\u003e下图来自 \u003ccode\u003ewhy-need-git-flow\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"image.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emaster\u003c/code\u003e : 主干分支, 用于正式发布的分支, 需要由专人严格审核测试后的 \u003ccode\u003erelease\u003c/code\u003e / \u003ccode\u003ehotfix\u003c/code\u003e 分支才可以合并到该分支.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehotfix\u003c/code\u003e : 用于热修复, 当 \u003ccode\u003emaster\u003c/code\u003e 出现紧急 bug 时, 就需要基于 \u003ccode\u003emaster\u003c/code\u003e 临时创建一个分支进行修复, 修复测试完成后, 合并到 \u003ccode\u003emaster\u003c/code\u003e 和 \u003ccode\u003edev\u003c/code\u003e 分支, 修复完成后删除 \u003ccode\u003ehotfix\u003c/code\u003e 分支.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003edev\u003c/code\u003e : 开发分支, 在 \u003ccode\u003emaster\u003c/code\u003e 分支基础上创建而来, 是功能开发的基础分支. 一般不可在这条分支上直接开发, 需要新建一个 \u003ccode\u003efeat\u003c/code\u003e 分支, 再进行开发.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003efeat\u003c/code\u003e: 功能分支, 基于 \u003ccode\u003emaster\u003c/code\u003e 分支, 不同的开发人员负责不同的 \u003ccode\u003efeat\u003c/code\u003e 分支, 开发测试完成后, 提交 \u003ccode\u003ePR(Pull Request)\u003c/code\u003e 到 remote, 由专人审核, 审核通过后合并到 \u003ccode\u003edev\u003c/code\u003e 分支.\u003c/p\u003e","title":"Git 学习记录"},{"content":"Pandas的安装与导入 在终端输入以下指令安装 pandas 库\npip install pandas 如果是使用 vscode 进行开发, 你可能需要额外安装 openpyxl 库:\npip install openpyxl 安装完成后在代码中导入:\nimport pandas as pd Pandas 读取数据的方式 Pandas 主要通过以下三种方式从不同来源读取数据:\npd.read_csv() pd.read_excel() pd.read_sql() Pandas 的数据类型 Pandas 的数据类型有 DataFrame 和 Series 一般来说, 查询单行或者单列的数据, 返回的结果为 Series 查询多行多列的数据, 返回的结果为 DataFrame\nPandas 查询数据的方式 Pandas 查询数据的 5 种方式: 1. df.loc 2. df.iloc 3. df.where 4. df.query. 在这几种方法中, df.loc 可以兼顾查询和覆写的功能, 具体使用方法如下:\ndf = pd.read_csv(your_csv_path) df.loc[:, \u0026#34;[column1]\u0026#34;] = df[\u0026#34;column1\u0026#34;].str.replace(\u0026#34;origin_str_part\u0026#34;, \u0026#34;target_str_part\u0026#34;) 上面这段代码的效果是, 查询 column1 这一整列(: 表示查询所有行), 同时将该行的 origin_str_part 全部替换为 target_str_part.\n你可以通过指定 index 和 column 来查询某一行或者某一列的数据:\n# 查询 index=5 的 column1, column2 下的数据, 返回 `pandas.series` series_query = df.loc[5, [\u0026#34;column1\u0026#34;, \u0026#34;column2\u0026#34;]] # 查询 index=1和5 的 column1, column2 下的数据, 返回的是 `pandas.dataframe` dataframe_query = df.loc[[1,5], [\u0026#34;column1\u0026#34;, \u0026#34;column2\u0026#34;]] 通过切片的方式进行查询 你也可以通过类似 Python 中切片的方式来进行取段的操作:\nPandas 的切片与 Python中的切片有些许差别, 主要是不去尾, 也就是 index=5和 \u0026quot;column\u0026quot; 也在数据查询的范围内\ndf.loc[[1:5], [\u0026#34;column1\u0026#34;: \u0026#34;column5\u0026#34;]] 使用条件表达式查询 loc 方法还可以与条件表达式相结合进行查询, 具体使用方法如下:\ndf.loc[df[\u0026#34;column\u0026#34;]\u0026lt;10, :] 上述代码实现的是返回 column 数值小于 10 的列表.\ndf[\u0026quot;column\u0026quot;]\u0026lt;10 返回的是所有索引和是否符合条件查询的结果 true or false\n你会看到以下类似的结果:\nindex1 false index2 false ... index10 true index11 true ... 你还可以通过 \u0026amp; 和 | 关键字进行组合查询.\n","permalink":"https://iuwu98005.github.io/posts/250702_pandas/","summary":"\u003ch2 id=\"pandas的安装与导入\"\u003ePandas的安装与导入\u003c/h2\u003e\n\u003cp\u003e在终端输入以下指令安装 \u003ccode\u003epandas\u003c/code\u003e 库\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install pandas\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果是使用 \u003ccode\u003evscode\u003c/code\u003e 进行开发, 你可能需要额外安装 \u003ccode\u003eopenpyxl\u003c/code\u003e 库:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install openpyxl \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装完成后在代码中导入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e pandas \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pd\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"pandas-读取数据的方式\"\u003ePandas 读取数据的方式\u003c/h2\u003e\n\u003cp\u003ePandas 主要通过以下三种方式从不同来源读取数据:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003epd.read_csv()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epd.read_excel()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epd.read_sql()\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"pandas-的数据类型\"\u003ePandas 的数据类型\u003c/h2\u003e\n\u003cp\u003ePandas 的数据类型有 \u003ccode\u003eDataFrame\u003c/code\u003e 和 \u003ccode\u003eSeries\u003c/code\u003e\n一般来说, 查询单行或者单列的数据, 返回的结果为 Series\n查询多行多列的数据, 返回的结果为 DataFrame\u003c/p\u003e\n\u003ch2 id=\"pandas-查询数据的方式\"\u003ePandas 查询数据的方式\u003c/h2\u003e\n\u003cp\u003ePandas 查询数据的 5 种方式: 1. \u003ccode\u003edf.loc\u003c/code\u003e 2. \u003ccode\u003edf.iloc\u003c/code\u003e 3. \u003ccode\u003edf.where\u003c/code\u003e 4. \u003ccode\u003edf.query\u003c/code\u003e.\n在这几种方法中, \u003ccode\u003edf.loc\u003c/code\u003e 可以兼顾查询和覆写的功能, 具体使用方法如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread_csv(your_csv_path)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eloc[:, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[column1]\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;column1\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;origin_str_part\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;target_str_part\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面这段代码的效果是, 查询 column1 这一整列(\u003ccode\u003e:\u003c/code\u003e 表示查询所有行), 同时将该行的 \u003ccode\u003eorigin_str_part\u003c/code\u003e 全部替换为 \u003ccode\u003etarget_str_part\u003c/code\u003e.\u003c/p\u003e","title":"Pandas Tutorial"},{"content":"基本概念 多任务中的并发和并行\n并发: 一段时间内交替执行任务 并行: 一段时间内同时执行多个任务 进程 python 中可以通过多进程来实现多任务.\n进程的概念 进程 (Process) 是操作系统资源分配和调度的基本单位.\n# main.py def foo1():... def foo2():... foo1() foo2() 在运行 .py 文件时, 操作系统会创建一个进程, 依次运行 foo1 和 foo2 两个方法.\n多进程 main.py 运行后会创建一个进程, 此时如果再次创建一个进程, 即为子进程. 我们让主进程运行 foo1, 让子进程来运行 foo2即可提升代码运行的效率.\n进程的创建步骤 1.导入进程包\nimport multiprocessing 2.创建进程对象\nmp = multiprocessing.Process() Process() 方法主要有3个参数:\ntarget: 执行的目标函数名(方法名), 如 foo2 name: 进程名, 一般不用设置 group: 进程组, 当前为 None 3.启动进程\nmp.start() 进程执行带有参数的任务 args 以元组方式传参 kwargs 以字典方式传参 def foo1(argument:int):... def foo2(argument:int):... foo1_process = multiprocessing.Process(target=foo1, args=(3,)) foo1_process.start() foo2_process = multiprocessing.Process(target=foo2, kwargs={\u0026#34;argument\u0026#34;, 3}) foo2_process.start() 获取进程编号 当程序进程数量越来越多时, 为了更好地对进程进行管理, 就需要知道每个进程的编号\n获取当前进程编号\nimport os os.getpid() 获取当前父进程编号\nimport os os.getppid() 在方法运行后获取 pid:\ndef foo1(argument:int): # func print(f\u0026#34;foo1 pid: {os.getpid()}\u0026#34;) def foo2(argument:int): # func print(f\u0026#34;foo2 pid: {os.getpid()}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: # 1. 创建子进程对象并指定任务名 foo1_process = multiprocessing.Process(target=foo1, args=(3,)) foo2_process = multiprocessing.Process(target=foo2, kwargs={\u0026#34;argument\u0026#34;, 3}) # 2. 启动子进程并执行任务 foo1_process.start() foo2_process.start() 进程的注意点 主进程会等待所有子进程执行完成结束再结束.\ndef foo1(): for i in range(10): print(\u0026#34;子进程运行中...\u0026#34;) time.sleep(0.2) print(\u0026#34;子进程执行完毕\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: ps = multiprocessing.Process(target=foo1) ps.start() time.sleep(0.5) print(\u0026#34;主进程执行完毕\u0026#34;) 如何实现主进程结束, 所有子进程也结束 设置守护主进程: ps.daemon = True\ndef foo1(): for i in range(10): print(\u0026#34;子进程运行中...\u0026#34;) time.sleep(0.2) print(\u0026#34;子进程执行完毕\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: ps = multiprocessing.Process(target=foo1) # 设置守护主进程, 主进程推出后子进程自动销毁, 不再执行子进程中的代码 ps.daemon = True ps.start() time.sleep(0.5) print(\u0026#34;主进程执行完毕\u0026#34;) 结合实际案例 如何实现多进程实现拷贝任务:\n遍历文件列表 每次遍历就创建一个子进程来执行拷贝任务 线程 进程是分配资源的最小单位. 线程是程序执行的最小单位, 进程分配资源, 线程通过资源来执行程序. 线程自己不拥有系统资源, 同一进程的不同线程可以共享该进程所拥有的资源.\n进程运行时默认会有一个主线程用来执行程序.\nPython 中多线程是一种并发执行任务的方式, 并不是真的并行. 由于全局解释器锁 GIL 的存在，Python 多线程在同一时间只能有一个线程执行.\n线程的创建步骤 导入线程模块\nimport threading 通过线程类创建对象\n\u0026#34;\u0026#34;\u0026#34; arg. target 执行的目标函数名 arg. name 线程名. 默认会按照 thread-1, thread-2...依次递增 arg. group 线程组. 默认为 None \u0026#34;\u0026#34;\u0026#34; t = threading.Thread(target=[目标函数名]) 启动线程对象\nt.start() args 参数的使用 线程传入 args 与进程十分类似:\nt1 = threading.Thread(target=[目标函数名], args=(3,)) t2 = threading.Thread(target=[目标函数名], kwargs={\u0026#34;arg\u0026#34;: 3}) t1.start() t2.start() 主线程和子线程的结束顺序 import threading import time def work(): for i in range(10): time.sleep(0.2) print(\u0026#34;sub thread end\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: t1 = threading.Thread(target=work) t1.start() time.sleep(1) print(\u0026#34;main thread end\u0026#34;) 运行以上代码可以发现结果与进程相似, 主线程会等待子线程运行结束后再结束.\n设置守护进程 和进程的守护进程类似, 线程也可以设置主线程来实现主线程结束后, 所有子线程也都结束.\nt1 = threading.Thread(target=work, daemon=True) ~~# or t1.setDaemon(True)~~ 已废弃 # or t1.daemon = True t1.start() 获取当前线程信息 curr_thread = threading.current_thread() print(curr_thread) 多线程的执行顺序 如果我们创建多个线程执行并打印信息, 可以发现线程的顺序与代码的逻辑顺序不相符.\ndef get_curr_thread(): # funcs... time.sleep(1) curr_thread = threading.current_thread() print(curr_thread) if __name__ == \u0026#34;__main__\u0026#34;: for i in range(5): t = threading.Thread(target=get_curr_thread) t.start() 你会看到类似以下的输出:\n\u0026lt;Thread(Thread-1, started 139676544125744)\u0026gt; \u0026lt;Thread(Thread-4, started 139676544122342)\u0026gt; \u0026lt;Thread(Thread-3, started 139676544124435)\u0026gt; \u0026lt;Thread(Thread-2, started 139676544122213)\u0026gt; \u0026lt;Thread(Thread-2, started 139676544124535)\u0026gt; 可以发现程序并不是按照顺序来执行线程的.\n注意有一个例外, 如果我们去掉代码中的 time.sleep(1)后, 可能就会看到终端打印就是按照1.2.3.4.5的顺序来输出.\n由于函数体非常短、几乎不耗时，所以线程执行得极快.\n在这种情况下，由于线程创建和运行都在主线程中顺序执行，很可能第一个线程还没执行完，第二个就开始执行了，而它们执行体积小、竞争少，导致操作系统顺序调度它们（并不是强制顺序，只是调度碰巧是顺序的）.\n我们可以通过 join() 或者 threading.lock() 来控制并发访问的顺序.\n总结 进程是分配资源的最小单位. 线程是程序执行的最小单位, 进程分配资源, 线程通过资源来执行程序. 线程自己不拥有系统资源, 同一进程的不同线程可以共享该进程所拥有的资源.\n进程运行时默认会有一个主线程用来执行程序.\n多线程和多进程对比 创建进程的资源开销比线程大. 创建主进程的时候所有文件都会加载一遍. 进程是资源分配的基本单位, 线程是 CPU 调度的基本单位. 进程可以充分发挥多核的优点. 线程虽然资源开销小, 但是其为并发执行, 并不是真正的并行(由于全局解释器锁 GIL 的存在，Python 多线程在同一时间只能有一个线程执行.) ","permalink":"https://iuwu98005.github.io/posts/250626-python-thread/","summary":"\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003cp\u003e多任务中的并发和并行\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e并发: 一段时间内交替执行任务\u003c/li\u003e\n\u003cli\u003e并行: 一段时间内同时执行多个任务\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"进程\"\u003e进程\u003c/h2\u003e\n\u003cp\u003epython 中可以通过多进程来实现多任务.\u003c/p\u003e\n\u003ch3 id=\"进程的概念\"\u003e进程的概念\u003c/h3\u003e\n\u003cp\u003e进程 (Process) 是操作系统资源分配和调度的基本单位.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# main.py\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo1\u003c/span\u003e():\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo2\u003c/span\u003e():\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo1()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo2()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在运行 \u003ccode\u003e.py\u003c/code\u003e 文件时, 操作系统会创建一个进程, 依次运行 \u003ccode\u003efoo1\u003c/code\u003e 和 \u003ccode\u003efoo2\u003c/code\u003e 两个方法.\u003c/p\u003e\n\u003ch3 id=\"多进程\"\u003e多进程\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003emain.py\u003c/code\u003e 运行后会创建一个进程, 此时如果再次创建一个进程, 即为子进程. 我们让主进程运行 \u003ccode\u003efoo1\u003c/code\u003e, 让子进程来运行 \u003ccode\u003efoo2\u003c/code\u003e即可提升代码运行的效率.\u003c/p\u003e\n\u003ch3 id=\"进程的创建步骤\"\u003e进程的创建步骤\u003c/h3\u003e\n\u003cp\u003e1.导入进程包\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e multiprocessing\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2.创建进程对象\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e multiprocessing\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eProcess()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eProcess()\u003c/code\u003e 方法主要有3个参数:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etarget: 执行的目标函数名(方法名), 如 \u003ccode\u003efoo2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ename: 进程名, 一般不用设置\u003c/li\u003e\n\u003cli\u003egroup: 进程组, 当前为 \u003ccode\u003eNone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e3.启动进程\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"进程执行带有参数的任务\"\u003e进程执行带有参数的任务\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eargs\u003c/code\u003e 以元组方式传参\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekwargs\u003c/code\u003e 以字典方式传参\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo1\u003c/span\u003e(argument:int):\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efoo2\u003c/span\u003e(argument:int):\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo1_process \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e multiprocessing\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eProcess(target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efoo1, args\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo1_process\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo2_process \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e multiprocessing\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eProcess(target\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efoo2, kwargs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;argument\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo2_process\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"获取进程编号\"\u003e获取进程编号\u003c/h3\u003e\n\u003cp\u003e当程序进程数量越来越多时, 为了更好地对进程进行管理, 就需要知道每个进程的编号\u003c/p\u003e","title":"Python 多线程编程"},{"content":"demo地址：https://github.com/IUWU98005/mai-agent\n📌 简介 本文档将指导你如何将自定义的 MCP 服务（如你在 main.py 中编写的基于 FastMCP 的服务）集成到 Cherry Studio 中，实现本地调试和调用。\nCherry Studio 是一个支持多种 Agent 和工具链插件的开发环境，而 MCP（Modular Command Protocol）是 Cherry Studio 与外部 AI 工具或脚本通信的主要协议。\n🛠️ 环境要求 - Python 3.10+ - 已安装 Cherry Studio - MCP 服务依赖： - pydantic_ai - fastmcp - dotenv - psutil、platform 等标准/常用库 📁 项目结构 确保你的项目大致如下所示：\nproject_root/ │ ├── main.py # MCP 服务主程序 ├── tools.py # 自定义工具函数 ├── .env # 可选的环境变量文件 └── cases/ # 供工具函数使用的目录 MCP 服务核心代码（main.py） from pydantic_ai.agent import AgentRunResult from pydantic_ai.models.gemini import GeminiModel from pydantic_ai import Agent from mcp.server.fastmcp import FastMCP from dotenv import load_dotenv from typing_extensions import NoReturn import tools load_dotenv() mcp = FastMCP(name=\u0026quot;base\u0026quot;) @mcp.tool(tools.get_host_info()) def host(): return \u0026quot;\u0026quot; def agent_run() -\u0026gt; NoReturn: model = GeminiModel(\u0026quot;gemini-2.0-flash\u0026quot;) agent = Agent( model=model, system_prompt=\u0026quot;You are a experienced programmer\u0026quot;, tools=[tools.read_file, tools.list_files, tools.rename_file], ) history: list = [] while True: user_input: str = input(\u0026quot;Input: \u0026quot;) resp: AgentRunResult[str] = agent.run_sync(user_input, message_history=history) history = list(resp.all_messages()) print(resp.output) def main() -\u0026gt; None: mcp.run(transport=\u0026quot;stdio\u0026quot;) if __name__ == \u0026quot;__main__\u0026quot;: main() 通过 json 配置文件添加 MCP 服务器 在 CherryStudio 添加 MCP 服务器, 并选择 从 Json 导入, 配置 json 文件:\n{ \u0026quot;mcpServers\u0026quot;: { \u0026quot;hostInfoMcp\u0026quot;: { \u0026quot;command\u0026quot;: \u0026quot;uv\u0026quot;, \u0026quot;args\u0026quot;: [ \u0026quot;--directory\u0026quot;, \u0026quot;/to_your_mcp_server_path\u0026quot;, \u0026quot;run\u0026quot;, \u0026quot;main.py\u0026quot; ] } } } 如果没有安装过uv, 就先使用管理员模式打开 PowerShell 并输入以下指令:\npowershell -ExecutionPolicy ByPass -c \u0026quot;irm https://astral.sh/uv/install.ps1 | iex\u0026quot; 之后在智能体聊天中选中创建的 MCP 服务器, 即可让智能体使用 MCP 服务器来进行回复.\n","permalink":"https://iuwu98005.github.io/posts/250623-mcp/","summary":"\u003cp\u003edemo地址：\u003ca href=\"https://github.com/IUWU98005/mai-agent\"\u003ehttps://github.com/IUWU98005/mai-agent\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"-简介\"\u003e📌 简介\u003c/h2\u003e\n\u003cp\u003e本文档将指导你如何将自定义的 MCP 服务（如你在 main.py 中编写的基于 FastMCP 的服务）集成到 Cherry Studio 中，实现本地调试和调用。\u003c/p\u003e\n\u003cp\u003eCherry Studio 是一个支持多种 Agent 和工具链插件的开发环境，而 MCP（Modular Command Protocol）是 Cherry Studio 与外部 AI 工具或脚本通信的主要协议。\u003c/p\u003e\n\u003ch2 id=\"-环境要求\"\u003e🛠️ 环境要求\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e- Python 3.10+\n- 已安装 Cherry Studio\n- MCP 服务依赖：\n    - pydantic_ai\n    - fastmcp\n    - dotenv\n    - psutil、platform 等标准/常用库\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"-项目结构\"\u003e📁 项目结构\u003c/h2\u003e\n\u003cp\u003e确保你的项目大致如下所示：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject_root/\n│\n├── main.py          # MCP 服务主程序\n├── tools.py         # 自定义工具函数\n├── .env             # 可选的环境变量文件\n└── cases/           # 供工具函数使用的目录\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"mcp-服务核心代码mainpy\"\u003eMCP 服务核心代码（main.py）\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003efrom pydantic_ai.agent import AgentRunResult\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai import Agent\n\nfrom mcp.server.fastmcp import FastMCP\n\nfrom dotenv import load_dotenv\nfrom typing_extensions import NoReturn\n\nimport tools\n\nload_dotenv()\n\nmcp = FastMCP(name=\u0026quot;base\u0026quot;)\n\n\n@mcp.tool(tools.get_host_info())\ndef host():\n    return \u0026quot;\u0026quot;\n\n\ndef agent_run() -\u0026gt; NoReturn:\n    model = GeminiModel(\u0026quot;gemini-2.0-flash\u0026quot;)\n    agent = Agent(\n        model=model,\n        system_prompt=\u0026quot;You are a experienced programmer\u0026quot;,\n        tools=[tools.read_file, tools.list_files, tools.rename_file],\n    )\n\n    history: list = []\n    while True:\n        user_input: str = input(\u0026quot;Input: \u0026quot;)\n        resp: AgentRunResult[str] = agent.run_sync(user_input, message_history=history)\n        history = list(resp.all_messages())\n        print(resp.output)\n\n\ndef main() -\u0026gt; None:\n    mcp.run(transport=\u0026quot;stdio\u0026quot;)\n\n    if __name__ == \u0026quot;__main__\u0026quot;:\n        main()\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"通过-json-配置文件添加-mcp-服务器\"\u003e通过 json 配置文件添加 MCP 服务器\u003c/h2\u003e\n\u003cp\u003e在 CherryStudio 添加 MCP 服务器, 并选择 \u003ccode\u003e从 Json 导入\u003c/code\u003e, 配置 json 文件:\u003c/p\u003e","title":"在 Cherry Studio 配置本地 MCP 服务"},{"content":"简介 本项目展示如何使用 Python 构建一个简单的文件系统助手程序。该助手可以理解用户的文本输入，调用指定工具函数操作文件，并通过 Gemini 模型进行任务处理。\ndemo地址：https://github.com/IUWU98005/mai-agent\n项目结构 . ├── __init__.py ├── main.py # 程序入口 ├── tools.py # 工具函数模块 └── cases/ # 示例文件目录 ├── a.go ├── b.py ├── c.java └── d.c 环境准备 安装依赖：\npip install pydantic-ai python-dotenv 配置环境变量：在 .env 文件中添加 Gemini API 密钥：\nGEMINI_API_KEY=your_api_key_here 关键模块说明 工具函数（tools.py）\n定义了程序可用的基础文件操作：\n# filepath: tools.py def read_file(name: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;读取指定文件的内容\u0026#34;\u0026#34;\u0026#34; def list_files() -\u0026gt; list[str]: \u0026#34;\u0026#34;\u0026#34;列出目录中的所有文件\u0026#34;\u0026#34;\u0026#34; def rename_file(cur_name: str, new_name: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;重命名文件\u0026#34;\u0026#34;\u0026#34; 助手初始化（main.py）\nfrom pydantic_ai.agent import Agent from pydantic_ai.models.gemini import GeminiModel import tools # 初始化模型 model = GeminiModel(\u0026#34;gemini-2.0-flash\u0026#34;) # 创建助手实例 agent = Agent( model=model, system_prompt=\u0026#34;You are an experienced programmer.\u0026#34;, tools=[tools.read_file, tools.list_files, tools.rename_file], ) 主程序逻辑\ndef main() -\u0026gt; None: history = [] while True: user_input = input(\u0026#34;Input: \u0026#34;) resp = agent.run_sync(user_input, message_history=history) history = list(resp.all_messages()) print(resp.output) 使用示例 查看目录下所有文件：\nInput: 列出所有文件 查看指定文件内容：\nInput: 读取 a.go 的内容 重命名文件：\nInput: 将 a.go 重命名为 new.go ","permalink":"https://iuwu98005.github.io/posts/250613-ai-agent/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e本项目展示如何使用 Python 构建一个简单的文件系统助手程序。该助手可以理解用户的文本输入，调用指定工具函数操作文件，并通过 Gemini 模型进行任务处理。\u003c/p\u003e\n\u003cp\u003edemo地址：\u003ca href=\"https://github.com/IUWU98005/mai-agent\"\u003ehttps://github.com/IUWU98005/mai-agent\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"项目结构\"\u003e项目结构\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── main.py          \u003cspan style=\"color:#75715e\"\u003e# 程序入口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── tools.py         \u003cspan style=\"color:#75715e\"\u003e# 工具函数模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── cases/           \u003cspan style=\"color:#75715e\"\u003e# 示例文件目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── a.go\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── b.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── c.java\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    └── d.c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"环境准备\"\u003e环境准备\u003c/h2\u003e\n\u003cp\u003e安装依赖：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install pydantic-ai python-dotenv\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e配置环境变量：在 \u003ccode\u003e.env\u003c/code\u003e 文件中添加 Gemini API 密钥：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGEMINI_API_KEY\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eyour_api_key_here\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"关键模块说明\"\u003e关键模块说明\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e工具函数（tools.py）\u003c/p\u003e\n\u003cp\u003e定义了程序可用的基础文件操作：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# filepath: tools.py\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eread_file\u003c/span\u003e(name: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;读取指定文件的内容\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist_files\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e list[str]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;列出目录中的所有文件\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erename_file\u003c/span\u003e(cur_name: str, new_name: str) \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e str:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;重命名文件\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e助手初始化（main.py）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pydantic_ai.agent \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Agent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pydantic_ai.models.gemini \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GeminiModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e tools\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 初始化模型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GeminiModel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;gemini-2.0-flash\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 创建助手实例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eagent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Agent(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003emodel,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    system_prompt\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;You are an experienced programmer.\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tools\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[tools\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread_file, tools\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elist_files, tools\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erename_file],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e主程序逻辑\u003c/p\u003e","title":"构建简单的 AI Agent 实战教程"},{"content":"1. Nginx的安装与运行 1. 启动Nginx 切换到nginx目录下:\ncd C:\\nginx 启动nginx:\nstart nginx 2. 验证Nginx是否运行 在浏览器访问localhost:8080，会出现Nginx的欢迎页面。\n3. 配置Nginx 配置文件通常位于conf目录下，名为nginx.conf 可以通过配置文件设置端口、添加虚拟主机等 4. 重启以应用更改 nginx -s reload 5. 停止Nginx nginx -s stop 请注意, 如果你的系统防火墙开启, 可能需要在防火墙设置中允许nginx使用的端口(默认是80和443).\n2. Nginx的基本命令 nginx -s stop # 关闭 nginx, 可能不保存相关信息, 迅速终止web服务. nginx -s quit # 关闭 nginx, 保存相关信息, 有安排的结束web服务. nginx -s reload # 改变 nginx 相关配置后, 重载 nginx 以应用配置更改. nginx -s reopen # 重新打开日志文件. nginx -c filename # 为 nginx 指定一个配置文件, 用以代替缺省的. nginx -t # 不运行, 仅测试配置文件. nginx 将检查配置文件语法的正确性. nginx -v # 显示 nginx 的版本. nginx -V # 显示 nginx 的版本, 编译器版本和配置参数 ","permalink":"https://iuwu98005.github.io/posts/250611-nginx/","summary":"\u003ch2 id=\"1-nginx的安装与运行\"\u003e1. Nginx的安装与运行\u003c/h2\u003e\n\u003ch3 id=\"1-启动nginx\"\u003e1. 启动Nginx\u003c/h3\u003e\n\u003cp\u003e切换到nginx目录下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd C:\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003eginx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启动nginx:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estart nginx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-验证nginx是否运行\"\u003e2. 验证Nginx是否运行\u003c/h3\u003e\n\u003cp\u003e在浏览器访问\u003ccode\u003elocalhost:8080\u003c/code\u003e，会出现Nginx的欢迎页面。\u003c/p\u003e\n\u003ch3 id=\"3-配置nginx\"\u003e3. 配置Nginx\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e配置文件通常位于\u003ccode\u003econf\u003c/code\u003e目录下，名为\u003ccode\u003enginx.conf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e可以通过配置文件设置端口、添加虚拟主机等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-重启以应用更改\"\u003e4. 重启以应用更改\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s reload\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-停止nginx\"\u003e5. 停止Nginx\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s stop\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e请注意, 如果你的系统防火墙开启, 可能需要在防火墙设置中允许nginx使用的端口(默认是80和443).\u003c/p\u003e\n\u003ch2 id=\"2-nginx的基本命令\"\u003e2. Nginx的基本命令\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s stop  \u003cspan style=\"color:#75715e\"\u003e# 关闭 nginx, 可能不保存相关信息, 迅速终止web服务.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s quit  \u003cspan style=\"color:#75715e\"\u003e# 关闭 nginx, 保存相关信息, 有安排的结束web服务.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s reload  \u003cspan style=\"color:#75715e\"\u003e# 改变 nginx 相关配置后, 重载 nginx 以应用配置更改.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -s reopen  \u003cspan style=\"color:#75715e\"\u003e# 重新打开日志文件.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -c filename  \u003cspan style=\"color:#75715e\"\u003e# 为 nginx 指定一个配置文件, 用以代替缺省的.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -t  \u003cspan style=\"color:#75715e\"\u003e# 不运行, 仅测试配置文件. nginx 将检查配置文件语法的正确性.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -v  \u003cspan style=\"color:#75715e\"\u003e# 显示 nginx 的版本.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enginx -V  \u003cspan style=\"color:#75715e\"\u003e# 显示 nginx 的版本, 编译器版本和配置参数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Nginx"},{"content":"项目地址: https://github.com/Liu-WeiHu/hyprdots/tree/current\nKeybindings \u0026ldquo;\u0026ldquo;\u0026ldquo;html\nKeys Action Super + QAlt + F4 Close focused window Super + Del Kill Hyprland session Super + W Toggle the window between focus and float Super + G Toggle the window between focus and group Alt + Enter Toggle the window between focus and fullscreen Super + L Launch lock screen Super + Shift + F Toggle pin on focused window Super + Backspace Launch logout menu Ctrl + Esc Toggle waybar Super + T Launch terminal emulator (kitty) Super + E Launch file manager (dolphin) Super + C Launch text editor (vscode) Super + F Launch web browser (firefox) Ctrl + Shift + Esc Launch system monitor (htop/btop or fallback to top) Super + A Launch application launcher (rofi) Super + Tab Launch window switcher (rofi) Super + Shift + E Launch file explorer (rofi) F10 Toggle audio mute F11 Decrease volume F12 Increase volume Super + P Partial screenshot capture Super + Ctrl + P Partial screenshot capture (frozen screen) Super + Alt + P Monitor screenshot capture PrtScn All monitors screenshot capture Super + Alt + G Disable hypr effects for gamemode Super + Alt + →← Cycle wallpaper Super + Alt + ↑↓ Cycle waybar mode Super + Shift + R Launch wallbash mode select menu (rofi) Super + Shift + T Launch theme select menu (rofi) Super + Shift + A Launch style select menu (rofi) Super + Shift + W Launch wallpaper select menu (rofi) Super + V Launch clipboard (rofi) Super + K Switch keyboard layout Super + ←→↑↓ Move window focus Alt + Tab Change window focus Super + [0-9] Switch workspaces Super + Ctrl + ←→ Switch workspaces to a relative workspace Super + Ctrl + ↓ Move to the first empty workspace Super + Shift + ←→↑↓ Resize windows Super + Shift + [0-9] Move focused window to a relative workspace Super + Shift + Ctrl + ←→↑↓ Move focused window around the current workspace Super + MouseScroll Scroll through existing workspaces Super + LeftClickSuper + Z Move focused window Super + RightClickSuper + X Resize focused window Super + Alt + S Move/Switch to special workspace (scratchpad) Super + S Toggle to special workspace Super + J Toggle focused window split Super + Alt + [0-9] Move focused window to a workspace silently Super + Ctrl + H Move between grouped windows backward Super + Ctrl + L Move between grouped windows forward \u0026quot;\u0026rdquo;\u0026rdquo;\n","permalink":"https://iuwu98005.github.io/posts/250611-archlinux-keybind/","summary":"\u003cp\u003e项目地址: \u003ca href=\"https://github.com/Liu-WeiHu/hyprdots/tree/current\"\u003ehttps://github.com/Liu-WeiHu/hyprdots/tree/current\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"keybindings\"\u003eKeybindings\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;\u0026ldquo;\u0026ldquo;html\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eKeys\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eAction\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eQ\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eF4\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eClose focused window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eDel\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eKill Hyprland session\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eW\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle the window between focus and float\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eG\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle the window between focus and group\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eEnter\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle the window between focus and fullscreen\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eL\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch lock screen\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eF\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle pin on focused window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eBackspace\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch logout menu\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eEsc\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle waybar\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eT\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch terminal emulator (kitty)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eE\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch file manager (dolphin)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eC\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch text editor (vscode)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eF\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch web browser (firefox)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eEsc\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch system monitor (htop/btop or fallback to top)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eA\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch application launcher (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eTab\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch window switcher (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eE\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch file explorer (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eF10\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle audio mute\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eF11\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDecrease volume\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eF12\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eIncrease volume\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eP\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePartial screenshot capture\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eP\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePartial screenshot capture (frozen screen)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eP\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMonitor screenshot capture\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003ePrtScn\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAll monitors screenshot capture\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eG\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDisable hypr effects for gamemode\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e→\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e←\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCycle wallpaper\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e↑\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↓\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCycle waybar mode\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eR\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch wallbash mode select menu (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eT\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch theme select menu (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eA\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch style select menu (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eW\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch wallpaper select menu (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eV\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLaunch clipboard (rofi)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eK\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSwitch keyboard layout\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e←\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e→\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↑\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↓\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove window focus\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eTab\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eChange window focus\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e[0-9]\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSwitch workspaces\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e←\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e→\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSwitch workspaces to a relative workspace\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e↓\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove to the first empty workspace\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e←\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e→\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↑\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↓\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eResize windows\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e[0-9]\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove focused window to a relative workspace\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eShift\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e←\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e→\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↑\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e↓\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove focused window around the current workspace\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eMouseScroll\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eScroll through existing workspaces\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eLeftClick\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eZ\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove focused window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eRightClick\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eX\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eResize focused window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eS\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove/Switch to special workspace (scratchpad)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eS\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle to special workspace\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eJ\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eToggle focused window split\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eAlt\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003e[0-9]\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove focused window to a workspace silently\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eH\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove between grouped windows backward\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c!-- raw HTML omitted --\u003eSuper\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eCtrl\u003c!-- raw HTML omitted --\u003e + \u003c!-- raw HTML omitted --\u003eL\u003c!-- raw HTML omitted --\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMove between grouped windows forward\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e\u0026quot;\u0026rdquo;\u0026rdquo;\u003c/p\u003e","title":"Archlinux 快捷键"},{"content":"1、更新系统（核心任务） sudo pacman -Syu # 同步仓库并升级所有软件包 2、清理软件包缓存（节省磁盘空间） sudo pacman -Sc # 删除已卸载软件的旧版本缓存 sudo pacman -Scc # 清空所有缓存（谨慎使用，可能导致无法降级软件） 替代工具： paccache -r # 使用 `pacman-contrib` 中的工具保留最近3个版本 3. 检查系统日志（排查潜在问题） journalctl -p 3 -xb # 查看优先级为 ERROR 及以上的日志 journalctl --disk-usage # 检查日志占用的磁盘空间 4. 备份重要数据（防止意外丢失） 手动备份： rsync -avh --progress /path/to/source /path/to/backup 自动备份：\ntimeshift（系统快照）\nborgbackup（去重加密备份\n5. 检查磁盘健康 sudo smartctl -a /dev/sda # 查看硬盘SMART状态（需安装 `smartmontools`） sudo df -h # 查看磁盘空间使用情况 sudo du -sh ~/Downloads # 检查指定目录占用空间 6. 监控系统资源 htop # 实时查看CPU、内存、进程状态（需安装 `htop`） nvtop # 监控NVIDIA GPU状态（需安装 `nvtop`） iotop # 查看磁盘I/O使用情况（需安装 `iotop`） 7. 检查安全性与异常登录 last -a # 查看最近登录记录 sudo netstat -tulpn | grep LISTEN # 检查开放端口 sudo fail2ban-client status # 查看入侵防护状态（需安装 `fail2ban`） 8. 维护配置文件 清理用户历史文件： rm ~/.bash_history # 慎用！建议使用 `history -c` 仅清理内存中的记录 删除临时文件： rm -rf ~/.cache/* # 清理用户缓存 注意事项 滚动更新的风险：Arch Linux 是滚动发行版，每日更新可能导致依赖冲突，建议：\n定期阅读 Arch News。 使用 downgrade 工具（AUR）降级问题软件包。 自动化工具：\n可通过 systemd timer 或 cron 自动执行清理、备份任务。 根据你的使用场景（如开发、游戏、服务器），可调整任务的优先级。例如：\n开发者：增加 git 仓库备份和编译缓存清理（rm -rf ~/.cache/*）。 桌面用户：关注图形驱动更新（如 nvidia 或 mesa）。 ","permalink":"https://iuwu98005.github.io/posts/250611-archlinux-dailycheck/","summary":"\u003ch3 id=\"1更新系统核心任务\"\u003e\u003cstrong\u003e1、更新系统（核心任务）\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pacman -Syu   \u003cspan style=\"color:#75715e\"\u003e# 同步仓库并升级所有软件包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2清理软件包缓存节省磁盘空间\"\u003e\u003cstrong\u003e2、清理软件包缓存（节省磁盘空间）\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pacman -Sc    \u003cspan style=\"color:#75715e\"\u003e# 删除已卸载软件的旧版本缓存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pacman -Scc   \u003cspan style=\"color:#75715e\"\u003e# 清空所有缓存（谨慎使用，可能导致无法降级软件）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e替代工具：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epaccache -r       \u003cspan style=\"color:#75715e\"\u003e# 使用 `pacman-contrib` 中的工具保留最近3个版本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-检查系统日志排查潜在问题\"\u003e\u003cstrong\u003e3. 检查系统日志（排查潜在问题）\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejournalctl -p \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e -xb  \u003cspan style=\"color:#75715e\"\u003e# 查看优先级为 ERROR 及以上的日志\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejournalctl --disk-usage  \u003cspan style=\"color:#75715e\"\u003e# 检查日志占用的磁盘空间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-备份重要数据防止意外丢失\"\u003e\u003cstrong\u003e4. 备份重要数据（防止意外丢失）\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e手动备份\u003c/strong\u003e：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ersync -avh --progress /path/to/source /path/to/backup\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e自动备份\u003c/strong\u003e：\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etimeshift\u003c/code\u003e（系统快照）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eborgbackup\u003c/code\u003e（去重加密备份\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-检查磁盘健康\"\u003e\u003cstrong\u003e5. 检查磁盘健康\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo smartctl -a /dev/sda       \u003cspan style=\"color:#75715e\"\u003e# 查看硬盘SMART状态（需安装 `smartmontools`）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo df -h                      \u003cspan style=\"color:#75715e\"\u003e# 查看磁盘空间使用情况\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo du -sh ~/Downloads         \u003cspan style=\"color:#75715e\"\u003e# 检查指定目录占用空间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"6-监控系统资源\"\u003e\u003cstrong\u003e6. 监控系统资源\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehtop        \u003cspan style=\"color:#75715e\"\u003e# 实时查看CPU、内存、进程状态（需安装 `htop`）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003envtop       \u003cspan style=\"color:#75715e\"\u003e# 监控NVIDIA GPU状态（需安装 `nvtop`）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiotop       \u003cspan style=\"color:#75715e\"\u003e# 查看磁盘I/O使用情况（需安装 `iotop`）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"7-检查安全性与异常登录\"\u003e\u003cstrong\u003e7. 检查安全性与异常登录\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elast -a     \u003cspan style=\"color:#75715e\"\u003e# 查看最近登录记录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo netstat -tulpn | grep LISTEN  \u003cspan style=\"color:#75715e\"\u003e# 检查开放端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo fail2ban-client status  \u003cspan style=\"color:#75715e\"\u003e# 查看入侵防护状态（需安装 `fail2ban`）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"8-维护配置文件\"\u003e\u003cstrong\u003e8. 维护配置文件\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e清理用户历史文件：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm ~/.bash_history  \u003cspan style=\"color:#75715e\"\u003e# 慎用！建议使用 `history -c` 仅清理内存中的记录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e删除临时文件：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm -rf ~/.cache/*   \u003cspan style=\"color:#75715e\"\u003e# 清理用户缓存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"注意事项\"\u003e\u003cstrong\u003e注意事项\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e滚动更新的风险\u003c/strong\u003e：Arch Linux 是滚动发行版，每日更新可能导致依赖冲突，建议：\u003c/p\u003e","title":"Archlinux 日常检查"},{"content":"📦 环境准备 确保本地安装了以下工具：\nHugo（建议安装 Hugo extended 版本） Git GitHub 账号 🏗️ 第一步：创建 Hugo 博客项目 hugo new site hugo-blog cd hugo-blog 添加一个主题（推荐 PaperMod）：\ngit submodule add \u0026lt;https://github.com/adityatelange/hugo-PaperMod\u0026gt; themes/PaperMod 修改 hugo.toml 启用主题：\ntheme = \u0026#34;PaperMod\u0026#34; 📝 第二步：配置站点基本信息 hugo.toml 示例配置（兼容 Hugo v0.128+）：\nbaseURL = \u0026#34;https://\u0026lt;your-username\u0026gt;.github.io/\u0026#34; title = \u0026#34;My Awesome Blog\u0026#34; languageCode = \u0026#34;en-us\u0026#34; theme = \u0026#34;PaperMod\u0026#34; [pagination] pagerSize = 10 [params] defaultTheme = \u0026#34;auto\u0026#34; ShowReadingTime = true ShowCodeCopyButtons = true ShowShareButtons = false 📄 第三步：创建文章 hugo new posts/hello-world.md 编辑文章文件并将 draft: true 改为 false。\n🚀 第四步：部署到 GitHub Pages 创建两个仓库：\n内容仓库（源码）：hugo-blog\n页面仓库（部署）：\u0026lt;your-username\u0026gt;.github.io\n页面仓库可为空，GitHub Pages 会托管它的 main 或 gh-pages 分支。\n设置 GitHub Secret（用于跨仓库部署）\n生成Personal Access Token 并勾选以下权限：\nrepo workflow 复制生成的 Token，并将其添加到 hugo-blog 仓库：\nSettings → Secrets and variables → Actions → New repository secret Name：GH_TOKEN Content：粘贴你的 token 添加 GitHub Actions 工作流\n在项目中创建 .github/workflows/deploy.yml：\nname: Deploy Hugo Blog to GitHub Pages on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build site run: hugo --minify - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: external_repository: \u0026lt;your-username\u0026gt;/\u0026lt;your-username\u0026gt;.github.io publish_branch: main publish_dir: ./public personal_token: ${{ secrets.GH_TOKEN }} 🌐 第五步：访问你的博客 部署成功后，访问：\nhttps://\u0026lt;your-username\u0026gt;.github.io/\n后续补充 自定义 Hugo 分页导航 Hugo 使用 config.toml, config.yaml 或 config.json (如果存在于站点根目录) 作为默认站点配置文件。根据Hugo官方文档介绍, 你可以在这些文件中设置分页相关的配置，例如：\n[pagination] # 默认每页显示的条目数 # default = 10 # 允许您在模板中重载此值 # enabled = true # 开启分页功能 # paginatePath = \u0026#34;page\u0026#34; # 分页路径，默认为 \u0026#34;page\u0026#34; 为 Hugo 启用搜索功能(以PaperMod为例) 在 hugo.toml 中启用搜索:\n[params] # ...existing code... fuseOpts = { isCaseSensitive = false, shouldSort = true } ShowSearch = true 配置搜索入口:\n[[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;Search\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 4 新建搜索页面:\n+++ title = \u0026#34;Search\u0026#34; layout = \u0026#34;search\u0026#34; url = \u0026#34;/search/\u0026#34; +++ 配置 outputs:\nPaperMod 前端搜索依赖于 /index.json 文件, 需要配置 outputs, hugo 才会为首页生成 index.json\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] ","permalink":"https://iuwu98005.github.io/posts/250611-hugo/","summary":"\u003ch2 id=\"-环境准备\"\u003e📦 环境准备\u003c/h2\u003e\n\u003cp\u003e确保本地安装了以下工具：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/installing/\"\u003eHugo\u003c/a\u003e（建议安装 Hugo extended 版本）\u003c/li\u003e\n\u003cli\u003eGit\u003c/li\u003e\n\u003cli\u003eGitHub 账号\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-第一步创建-hugo-博客项目\"\u003e🏗️ 第一步：创建 Hugo 博客项目\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site hugo-blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd hugo-blog\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e添加一个主题（推荐 PaperMod）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add \u0026lt;https://github.com/adityatelange/hugo-PaperMod\u0026gt; themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e修改 hugo.toml 启用主题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaperMod\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-第二步配置站点基本信息\"\u003e📝 第二步：配置站点基本信息\u003c/h2\u003e\n\u003cp\u003ehugo.toml 示例配置（兼容 Hugo v0.128+）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebaseURL \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://\u0026lt;your-username\u0026gt;.github.io/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etitle \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;My Awesome Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elanguageCode \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;en-us\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaperMod\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003epagination\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  pagerSize \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eparams\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  defaultTheme \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;auto\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ShowReadingTime \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ShowCodeCopyButtons \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ShowShareButtons \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-第三步创建文章\"\u003e📄 第三步：创建文章\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new posts/hello-world.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e编辑文章文件并将 draft: true 改为 false。\u003c/p\u003e","title":"Hugo + GitHub Pages 自动部署博客指南"},{"content":"Hi, I\u0026rsquo;m IUWU98005 👋\nWelcome to my personal blog. I\u0026rsquo;m passionate about tech, open source, and building things that work.\n","permalink":"https://iuwu98005.github.io/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m IUWU98005 👋\u003cbr\u003e\nWelcome to my personal blog. I\u0026rsquo;m passionate about tech, open source, and building things that work.\u003c/p\u003e","title":"About Me"}]